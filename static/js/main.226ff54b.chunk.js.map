{"version":3,"sources":["Components/Snake/Snake.js","Components/Food/Food.js","libs/utils.js","App.js","serviceWorker.js","index.js","Components/Snake/Snake.module.css","Components/Food/Food.module.css"],"names":["Snake","props","snakeDots","react_default","a","createElement","map","dot","index","style","left","concat","top","className","classes","Snake_dot","key","Food","Snake_food","getRandomCoordinates","Math","floor","random","initialState","level","direction","speed","score","highScore","localStorage","highestScore","food","gameOver","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onKeyDown","e","window","event","state","keyCode","setState","checkLevel","moveSnake","_this$state","dots","toConsumableArray","head","length","push","shift","checkHighScore","_this$state2","renderGameOver","Fragment","onClick","onGameOver","removeItem","interval","setInterval","document","onkeydown","clearInterval","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","_this$state3","enlargeSnake","_this$state4","enlargedSnake","unshift","_this2","snake","pop","forEach","_this$state5","setItem","_this$state6","Components_Snake_Snake","Components_Food_Food","Component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.226ff54b.chunk.js","sourcesContent":["import React from 'react';\nimport classes from './Snake.module.css';\n\nconst Snake = (props) => {\n    const { snakeDots } = props;\n    return (\n        <div>\n            {snakeDots.map((dot, index) => {\n                const style = {\n                    left: `${dot[0]}%`,\n                    top: `${dot[1]}%`,\n                }\n                return (\n                    <div className={classes.Snake_dot} key={index} style={style}></div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Snake;","import React from 'react'\nimport classes from './Food.module.css';\n\nconst Food = (props) => {\n    const style = {\n        left: `${props.dot[0]}%`,\n        top: `${props.dot[1]}%`,\n    }\n    return (\n        <div className={classes.Snake_food} style={style}></div>\n    )\n}\n\nexport default Food;","export const getRandomCoordinates = () => {\n    let min = 1;\n    let max = 98;\n    let x = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n    let y = Math.floor((Math.random()*(max-min+1)+min)/2)*2;\n    return [x,y];\n}","/* eslint-disable default-case */\nimport React, {Component} from 'react';\nimport { Snake, Food } from './Components';\nimport { getRandomCoordinates }  from './libs/utils';\n\nconst initialState = {\n  level: 'Noob',\n  direction: 'Right',\n  speed: 200,\n  score: 0,\n  highScore: localStorage.highestScore || 0,\n  food: getRandomCoordinates(),\n  snakeDots: [\n    [0,0],\n    [2,0],\n  ],\n  gameOver: false,\n}\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    localStorage.removeItem('highestScore');\n    this.interval = setInterval(this.moveSnake, this.state.speed);\n    document.onkeydown = this.onKeyDown;\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  componentDidUpdate() {\n    const { score } = this.state;\n    this.checkIfOutOfBorders();\n    this.checkIfCollapsed();\n    this.checkIfEat();\n    this.checkHighScore();\n    if (score%2 === 0) {\n      clearInterval(this.interval);\n      this.interval = setInterval(this.moveSnake, this.state.speed);\n    }\n  }\n\n  onKeyDown = (e) => {\n    e = e || window.event;\n    const { direction } = this.state;\n\n    switch (e.keyCode) {\n      case 38:\n        if (direction !== 'Down')\n          this.setState({direction: 'Up'});\n        break;\n      case 40:\n        if (direction !== 'Up')\n          this.setState({direction: 'Down'});\n        break;\n      case 37:\n        if (direction !== 'Right')\n          this.setState({direction: 'Left'});\n        break;\n      case 39:\n        if (direction !== 'Left')\n          this.setState({direction: 'Right'});\n        break;\n    }\n  }\n\n  checkLevel = () => {\n    const { score } = this.state;\n\n    if (score > 6) {\n      this.setState({level: 'Veteran'})\n    } else if (score > 6) {\n      this.setState({level: 'Expert'})\n    } else if (score > 4) {\n      this.setState({level: 'Amateur'})\n    } else if (score > 2) {\n      this.setState({level: 'Beginner'})\n    }\n  }\n\n  moveSnake = () => {\n    const { snakeDots, direction } = this.state;\n    let dots = [...snakeDots];\n    let head = dots[dots.length - 1];\n\n    switch(direction) {\n      case 'Right':\n        head = [head[0]+2, head[1]];\n        break;\n      case 'Left':\n        head = [head[0]-2, head[1]];\n        break;\n      case 'Down':\n        head = [head[0], head[1]+2];\n        break;\n      case 'Up':\n        head = [head[0], head[1]-2];\n        break;\n    }\n    dots.push(head);\n    dots.shift();\n    this.setState({\n      snakeDots: dots,\n    })\n  }\n\n  checkIfEat() {\n    const { snakeDots, food } = this.state;\n    let head = snakeDots[snakeDots.length - 1];\n    if (head[0] === food[0] && head[1] === food[1]) {\n      this.setState({\n        food: getRandomCoordinates(),\n      });\n      this.enlargeSnake();\n    }\n  }\n\n  enlargeSnake() {\n    const { snakeDots, score, speed } = this.state;\n    let enlargedSnake = [...snakeDots];\n    enlargedSnake.unshift([]);\n    this.setState({\n      snakeDots: [...enlargedSnake],\n      speed: (speed>10 && score%2===0) ? speed-20 : speed,\n      score: score+1,\n    });\n    this.checkLevel();\n  }\n  \n  checkIfCollapsed() {\n    const { snakeDots } = this.state;\n    let snake = [...snakeDots];\n    let head = snake[snake.length - 1];\n    snake.pop();\n    snake.forEach(dot => {\n      if (head[0] === dot[0] && head[1] === dot[1]) {\n        this.onGameOver();\n      }\n    })\n  }\n\n  checkIfOutOfBorders() {\n    const { snakeDots, gameOver } = this.state;\n    let head = snakeDots[snakeDots.length-1];\n    if (head[0] >= 100 || head[1] >= 100 || head[0] < 0 || head[1] < 0) {\n      if (!gameOver) {\n          this.setState({\n          gameOver: true,\n        })\n      }\n    }\n  }\n\n  checkHighScore = () => {\n    const { score, highScore } = this.state;\n    if (score > highScore) {\n      this.setState({\n        highScore: score,\n      });\n    }\n  }\n\n  onGameOver() {\n    const { highScore } = this.state;\n    localStorage.setItem('highestScore', highScore);\n    initialState.highScore = highScore;\n    this.setState(initialState);\n  }\n\n  renderGameOver = () => {\n    if (!this.state.gameOver) {\n      return null;\n    }\n    return (\n      <>\n        <h1>Game Over</h1>\n        <button onClick={() => this.onGameOver()}>\n          New Game\n        </button>\n      </>\n    )\n  }\n  \n  render() {\n    const { snakeDots, food, score, highScore, level, gameOver } = this.state;\n    return (\n      <>\n        <h4>Score: {score}</h4>\n        <h4>High Score: {highScore}</h4>\n        <h4>Level: {level}</h4>\n        {!gameOver\n          ? (\n            <div className=\"game-area\">\n              <Snake snakeDots={snakeDots} />\n              <Food dot={food} />\n            </div>\n          )\n          : this.renderGameOver()\n        }\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Snake_dot\":\"Snake_Snake_dot__30Fav\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Snake_food\":\"Food_Snake_food__2i1Lt\"};"],"sourceRoot":""}